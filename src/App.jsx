import React, { useState, useEffect, useCallback } from 'react';
import { Card, CardContent } from "@/components/ui/card";
import axios from 'axios';
import { Html5QrcodeScanner } from 'html5-qrcode";

export default function AttendanceTool() {
    const [studentsText, setStudentsText] = useState("");
    const [logs, setLogs] = useState([]);
    const [isMarking, setIsMarking] = useState(false);

    // –†–∞–∑–±–∏–≤–∞–µ–º —Ç–µ–∫—Å—Ç –Ω–∞ —Å–ø–∏—Å–æ–∫ { login, password }
    const parseStudents = useCallback(() => {
        return studentsText
            .split("\n")
            .map(line => line.trim())
            .filter(Boolean)
            .map(line => {
                const [login, password] = line.split(":");
                return { login, password };
            });
    }, [studentsText]);

    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å—ã –ø–æ –≤—Å–µ–º —Å—Ç—É–¥–µ–Ω—Ç–∞–º
    const markAll = useCallback(async (token) => {
        if (!token) return;

        setLogs([]);
        setIsMarking(true);

        const students = parseStudents();
        for (const student of students) {
            try {
                const session = axios.create({ withCredentials: true });

                await session.post("https://attendance-app.mirea.ru/login", {
                    username: student.login,
                    password: student.password,
                });

                await session.get(`https://attendance-app.mirea.ru/selfapprove?token=${token}`);

                setLogs(prevLogs => [...prevLogs, `[‚úî] ${student.login} ‚Äî OK`]);
            } catch (error) {
                setLogs(prevLogs => [
                    ...prevLogs,
                    `[‚úò] ${student.login} ‚Äî ${error.message || "–û—à–∏–±–∫–∞"}`
                ]);
            }
        }

        setIsMarking(false);
    }, [parseStudents]);

    // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Html5QrcodeScanner –∏ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    useEffect(() => {
        const scanner = new Html5QrcodeScanner("qr-reader", {
            fps: 10,
            // –ñ—ë—Å—Ç–∫–æ –∑–∞–¥–∞—ë–º —Ä–∞–∑–º–µ—Ä—ã –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–≤–∞–¥—Ä–∞—Ç–Ω–æ–µ —Å–æ–æ—Ç–Ω–æ—à–µ–Ω–∏–µ —Å—Ç–æ—Ä–æ–Ω
            qrbox: { width: 250, height: 250 },
            aspectRatio: 1.0
        }, /* verbose= */ false);

        // –û–±—Ä–∞–±–æ—Ç—á–∏–∫ —É–¥–∞—á–Ω–æ–≥–æ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        scanner.render(
            decodedText => {
                // –ò—â–µ–º –≤ —Å—Ç—Ä–æ–∫–µ —Ç–æ–∫–µ–Ω
                const match = decodedText.match(/token=([a-z0-9-]+)/i);
                if (match) {
                    // –°—Ä–∞–∑—É –∑–∞–ø—É—Å–∫–∞–µ–º –æ—Ç–º–µ—Ç–∫—É
                    markAll(match[1]);
                    // –ü–æ—Å–ª–µ –ø–µ—Ä–≤–æ–≥–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è QR –º–æ–∂–Ω–æ –æ—á–∏—Å—Ç–∏—Ç—å —Å–∫–∞–Ω–µ—Ä
                    scanner.clear().catch(() => {});
                }
            },
            error => {
                // –ú–æ–∂–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞—Ç—å –æ—à–∏–±–∫–∏ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
                console.warn("–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
            }
        );

        // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é –æ—á–∏—Å—Ç–∫–∏ —Å–∫–∞–Ω–µ—Ä–∞ –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞
        return () => {
            scanner.clear().catch(() => {});
        };
    }, [markAll]);

    return (
        <div className="p-4 space-y-4 max-w-md mx-auto">
            <h1 className="text-2xl font-bold text-center">üß† QR Attendance Tool</h1>

            <Card>
                <CardContent className="p-4 space-y-2">
                    <p className="text-sm">1Ô∏è‚É£ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR —Å –ø–∞—Ä—ã:</p>
                    {/* –û–∫–Ω–æ –∫–∞–º–µ—Ä—ã —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω–æ–≥–æ —Ä–∞–∑–º–µ—Ä–∞ */}
                    <div
                        id="qr-reader"
                        style={{ width: 250, height: 250, margin: "0 auto" }}
                    />
                </CardContent>
            </Card>

            <Card>
                <CardContent className="p-4 space-y-2">
                    <p className="text-sm">
                        2Ô∏è‚É£ –í—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –ª–æ–≥–∏–Ω–æ–≤ –∏ –ø–∞—Ä–æ–ª–µ–π (login:password, –ø–æ —Å—Ç—Ä–æ–∫–∞–º):
                    </p>
                    <textarea
                        className="w-full border rounded p-2 h-40 text-sm resize-none"
                        value={studentsText}
                        onChange={(e) => setStudentsText(e.target.value)}
                        placeholder="student1:pass1&#10;student2:pass2"
                    />
                </CardContent>
            </Card>

            <div className="mt-4 space-y-1 text-sm">
                {isMarking && <div>–û–±—Ä–∞–±–æ—Ç–∫–∞...</div>}
                {logs.map((log, i) => (
                    <div key={i} className="font-mono break-words">
                        {log}
                    </div>
                ))}
            </div>
        </div>
    );
}