import React, { useState, useEffect, useRef, useCallback } from 'react';
import { Button } from "@/components/ui/button";
import { Card, CardContent } from "@/components/ui/card";
import axios from 'axios';
import { Html5QrcodeScanner } from 'html5-qrcode';

// –•—É–∫ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å–∫–∞–Ω–µ—Ä–æ–º QR-–∫–æ–¥–æ–≤
function useQrScanner(onScanSuccess, onScanFailure, isActive) {
    const scannerRef = useRef(null);

    useEffect(() => {
        if (!isActive) return;

        // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Å–∫–∞–Ω–µ—Ä
        scannerRef.current = new Html5QrcodeScanner(
            "qr-reader",
            { fps: 10, qrbox: { width: 250, height: 250 }, aspectRatio: 1.0 },
            false
        );

        scannerRef.current.render(
            decodedText => onScanSuccess(decodedText),
            error => onScanFailure(error)
        );

        // –ß–∏—Å—Ç–∏–º —Å–∫–∞–Ω–µ—Ä –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞/—Å–º–µ–Ω–µ —Ñ–ª–∞–≥–∞
        return () => {
            scannerRef.current
                ?.clear()
                .catch(() => {});
        };
    }, [isActive, onScanSuccess, onScanFailure]);

    return scannerRef;
}

export default function AttendanceTool() {
    const [token, setToken] = useState("");
    const [scanned, setScanned] = useState(false);
    const [studentsText, setStudentsText] = useState("");
    const [logs, setLogs] = useState([]);
    const [isMarking, setIsMarking] = useState(false);

    // –§—É–Ω–∫—Ü–∏—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–ø–∏—Å–∫–∞ —Å—Ç—É–¥–µ–Ω—á–µ—Å–∫–∏—Ö –ª–æ–≥–∏–Ω–æ–≤/–ø–∞—Ä–æ–ª–µ–π
    const parseStudents = useCallback(() => {
        return studentsText
            .split("\n")
            .map(line => line.trim())
            .filter(Boolean)
            .map(line => {
                const [login, password] = line.split(":");
                return { login, password };
            });
    }, [studentsText]);

    // –ö–æ–ª–±—ç–∫ –ø—Ä–∏ —É—Å–ø–µ—à–Ω–æ–º —Å—á–∏—Ç—ã–≤–∞–Ω–∏–∏
    const handleScanSuccess = useCallback(decodedText => {
        const match = decodedText.match(/token=([a-z0-9-]+)/i);
        if (match) {
            setToken(match[1]);
            setScanned(true);
        }
    }, []);

    // –ö–æ–ª–±—ç–∫ –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–æ–¥–∏—Ç –∫–∞–º–µ—Ä–æ–π –∏ –Ω–µ —Å—á–∏—Ç—ã–≤–∞–µ—Ç QR)
    const handleScanFailure = useCallback(error => {
        console.warn("–û—à–∏–±–∫–∞ —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è:", error);
    }, []);

    // –ò–Ω–∏—Ü–∏–∏—Ä—É–µ–º —Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏–µ QR, —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ –µ—â—ë –Ω–µ –±—ã–ª–æ –æ—Ç—Å–∫–∞–Ω–∏—Ä–æ–≤–∞–Ω–æ
    useQrScanner(handleScanSuccess, handleScanFailure, !scanned);

    // –§—É–Ω–∫—Ü–∏—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –æ—Ç–º–µ—Ç–∫–∏
    const markAll = useCallback(async () => {
        if (!token) return;
        setLogs([]);
        setIsMarking(true);

        const students = parseStudents();
        for (const student of students) {
            try {
                // –°–æ–∑–¥–∞—ë–º –Ω–æ–≤—É—é —Å–µ—Å—Å–∏—é, —á—Ç–æ–±—ã –∫—É–∫–∏ –±—ã–ª–∏ —É–Ω–∏–∫–∞–ª—å–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å—Ç—É–¥–µ–Ω—Ç–∞
                const session = axios.create({ withCredentials: true });

                await session.post("https://attendance-app.mirea.ru/login", {
                    username: student.login,
                    password: student.password,
                });

                await session.get(`https://attendance-app.mirea.ru/selfapprove?token=${token}`);

                setLogs(prevLogs => [...prevLogs, `[‚úî] ${student.login} ‚Äî OK`]);
            } catch (error) {
                setLogs(prevLogs => [
                    ...prevLogs,
                    `[‚úò] ${student.login} ‚Äî ${error.message || "–û—à–∏–±–∫–∞"}`,
                ]);
            }
        }
        setIsMarking(false);
    }, [parseStudents, token]);

    // –ü—Ä–∏ –∂–µ–ª–∞–Ω–∏–∏ –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–æ–ø–∫—É "–°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞"
    const handleRescan = () => {
        setScanned(false);
        setToken("");
        setLogs([]);
    };

    return (
        <div className="p-4 space-y-4 max-w-md mx-auto">
            <h1 className="text-2xl font-bold text-center">üß† QR Attendance Tool</h1>

            <Card>
                <CardContent className="p-4 space-y-2">
                    <p className="text-sm">1Ô∏è‚É£ –û—Ç—Å–∫–∞–Ω–∏—Ä—É–π QR —Å –ø–∞—Ä—ã:</p>
                    {!scanned && <div id="qr-reader" className="w-full h-64" />}
                    {token && (
                        <p className="break-all text-xs">
                            üîó –¢–æ–∫–µ–Ω: <code>{token}</code>
                        </p>
                    )}
                    {scanned && (
                        <Button variant="outline" onClick={handleRescan}>
                            –°–∫–∞–Ω–∏—Ä–æ–≤–∞—Ç—å —Å–Ω–æ–≤–∞
                        </Button>
                    )}
                </CardContent>
            </Card>

            <Card>
                <CardContent className="p-4 space-y-2">
                    <p className="text-sm">
                        2Ô∏è‚É£ –í—Å—Ç–∞–≤—å —Å–ø–∏—Å–æ–∫ –ª–æ–≥–∏–Ω–æ–≤ –∏ –ø–∞—Ä–æ–ª–µ–π (login:password, –ø–æ —Å—Ç—Ä–æ–∫–∞–º):
                    </p>
                    <textarea
                        className="w-full border rounded p-2 h-40 text-sm resize-none"
                        value={studentsText}
                        onChange={(e) => setStudentsText(e.target.value)}
                        placeholder="student1:pass1&#10;student2:pass2"
                    />
                </CardContent>
            </Card>

            <div className="text-center">
                <Button onClick={markAll} disabled={!token || isMarking}>
                    {isMarking ? "–û—Ç–º–µ—á–∞–µ–º..." : "üöÄ –û—Ç–º–µ—Ç–∏—Ç—å –≤—Å–µ—Ö"}
                </Button>
            </div>

            <div className="mt-4 space-y-1 text-sm">
                {logs.map((log, i) => (
                    <div key={i} className="font-mono break-words">
                        {log}
                    </div>
                ))}
            </div>
        </div>
    );
}